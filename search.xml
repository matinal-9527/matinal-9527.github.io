<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>建造者模式</title>
    <url>/2021/05/18/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="什么叫建造者？他的应用场景又是什么呢？"><a href="#什么叫建造者？他的应用场景又是什么呢？" class="headerlink" title="什么叫建造者？他的应用场景又是什么呢？"></a>什么叫建造者？他的应用场景又是什么呢？</h3><blockquote>
<p>​    当我们需要实列化一个复杂的类，以得到不同结构类型和不同的内部状态的对象时，我们可以    用不同的类对它们的实列化操作逻辑分别进行封装，这些类我们就称之为建造者。</p>
<p>当我们需要来之同一个类，但是要就有不同结构对象时，就可以通过构造另一个建造者来进行    实列化。</p>
<p>​    ———-以上定义来自《设计模式之美》。</p>
</blockquote>
<p>为了加深理解我们再来一个流程图</p>
<p><img src="/images/640.webp"></p>
<p>从图中我们主以看出建造者主要分为4种角色：</p>
<ul>
<li>Product(产品类) :我们具体需要生成的类对象</li>
<li>Builder(抽象建造者类)：为我们需要生成的类对象，构建不同的模块属性，即：公开构建产品类的属性，隐藏产品类的其他功能</li>
<li>ConcreteBuilder(具体建造者类)：实现我们要生成的类对象</li>
<li>Director(导演类)：确定构建我们的类对象具体有哪些模块属性，在实际应用中可以不需要这个角色，直接通过client处理</li>
</ul>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>在电商中有多种不同类型的商品 <strong>普通实物商品</strong>，<strong>电子卡券商品</strong>，<strong>虚拟视频学习商品</strong> 等多种不同的商品，他们都是商品但是他们的属性却不一样，电子卡券：独有券码，学习视频：独有视频链接等。</p>
<p>那我们要怎么实现这种这种创建商品呢？</p>
<p>我们先看下最普通的创建方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="comment">//必填</span></span><br><span class="line">    <span class="keyword">private</span> String itemName;</span><br><span class="line">    <span class="comment">//必填</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">//卡券必填</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">//视频必填</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getItemName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItemName</span><span class="params">(String itemName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemName = itemName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(Integer type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先创建一个基础商品Item类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Item item=<span class="keyword">new</span> Item();</span><br><span class="line">        <span class="keyword">if</span> (client 创建普通商品)&#123;</span><br><span class="line">            item.setItemName();</span><br><span class="line">            item.setType();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client 创建电子卡券商品)&#123;</span><br><span class="line">            item.setItemName();</span><br><span class="line">            item.setCode();</span><br><span class="line">            item.setType();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client 创建视频)&#123;</span><br><span class="line">            item.setItemName();</span><br><span class="line">            item.setUrl();</span><br><span class="line">            item.setType();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们可以看到根据请求类型，也可以完全创建出我们想要的类型商品，但是一个商品属性不可能只有这么一点属性，那以后扩展更多呢？那这个代码我们看上去就会很臃肿，也不好维护。</p>
<p>接下来我们就看下建造者模式怎么去实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建造者模式实现</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemBuilder</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Item item=<span class="keyword">new</span> Item();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildNormal</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCard</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildVideo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//返回产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">getResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一步：创建我们的抽象建造者类。这里面我们看下有三个抽象方法，来确定不同的商品类型，我们调用不同的方法，达到解偶的思想</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建我们的抽象建造者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemConcreteBuilder</span> <span class="keyword">extends</span>  <span class="title">ItemBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        item.setItemName(<span class="string">&quot;普通商品&quot;</span>);</span><br><span class="line">        item.setType(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        item.setItemName(<span class="string">&quot;卡券商品&quot;</span>);</span><br><span class="line">        item.setCode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        item.setType(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        item.setItemName(<span class="string">&quot;视频商品&quot;</span>);</span><br><span class="line">        item.setUrl(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">        item.setType(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步：创建具体建造者类。对<strong>抽象建造者类</strong>的抽象方法进行实现赋值，达到我们所需要的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建具体建造者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemDirector</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ItemBuilder itemBuilder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemDirector</span><span class="params">(ItemBuilder itemBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.itemBuilder=itemBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">normalConstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        itemBuilder.buildNormal();</span><br><span class="line">        <span class="keyword">return</span> itemBuilder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">cardConstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        itemBuilder.buildCard();</span><br><span class="line">        <span class="keyword">return</span> itemBuilder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">videoConstruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        itemBuilder.buildVideo();</span><br><span class="line">        <span class="keyword">return</span> itemBuilder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：创建我们的导演类。指导我们怎么去创建对象，这个我们是可以简化的，视具体使用场景确定吧！</p>
<p><img src="/images/1.png"></p>
<p>最后就是看我们的测试结果了。在省略导演类的时候其实我们也完全可以的构建出我们想要的结果</p>
<p>与普通的写法相比<strong>建造者模式</strong>的写法使的这个代码可读性高，而且易扩展，不同类型的商品达到了解耦合的效果。</p>
<h3 id="举例二："><a href="#举例二：" class="headerlink" title="举例二："></a>举例二：</h3><p>假设我们现在有另外的一种场景，我们复制一个商品时，当没有填写库存时我们默认是0，当用户填写了时我们库存数量不能大于999999999。</p>
<p>PS：商品复制这个功能在电商领域是很普通的一个操作，对用户来说简化操作成本，提升用户体检。技术服务于业务，业务决定公司的长远利益</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyItem</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span> Long stock;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getStock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStock</span><span class="params">(Long stock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stock = stock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CopyItem</span><span class="params">(ItemBuilder builder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=builder.name;</span><br><span class="line">        <span class="keyword">this</span>.stock=builder.stock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CopyItem copyItem=<span class="keyword">new</span> CopyItem.ItemBuilder().setName(<span class="string">&quot;copyItem&quot;</span>).build();</span><br><span class="line">        System.out.println(JSON.toJSONString(copyItem));</span><br><span class="line">        CopyItem copyItem2=<span class="keyword">new</span> CopyItem.ItemBuilder().setName(<span class="string">&quot;copyItem&quot;</span>).setStock(<span class="number">999999999999999L</span>).build();</span><br><span class="line">        System.out.println(JSON.toJSONString(copyItem2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemBuilder</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long DEFAUL_STOCK=<span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">private</span> String name;</span><br><span class="line">            <span class="keyword">private</span> Long stock=DEFAUL_STOCK;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> CopyItem <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="comment">//可处理些额外逻辑</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> CopyItem(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ItemBuilder <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(name))&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.name=name;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> ItemBuilder <span class="title">setStock</span><span class="params">(Long stock)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (stock&gt;<span class="number">9999999999L</span>)&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;库存数量错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.stock=stock;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/2.png"></p>
<p>我们在内部创建了一个ItemBuilder，来处理我们的校验逻辑。当然我们使用普通的get，set方式其实也是可以实现的。</p>
<p>看到这里可能有人会问这个与我们使用get或者set方法又有什么区别呢？</p>
<p>解释：主要是为了解决我们的赋值处于一种无效状态</p>
<blockquote>
<p>无效状态指的是对象属性之间存在依赖关系，合法校验等，如果使用set方式会导致这种关系和校验得不到验证，所有可能会存在无效的状态，即A、B两个属性必须同时设置，缺一不可，然后set方法可能导致遗漏等</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Friend</title>
    <url>/2021/05/18/hello-world/</url>
    <content><![CDATA[<p>记录自己的生活点滴，我相信有一天一定会有一个人很想知道我的过去，很想了解我的—切。</p>
]]></content>
  </entry>
</search>
